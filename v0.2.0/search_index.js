var documenterSearchIndex = {"docs":
[{"location":"examples/Example301_Cube/#:-Cube","page":"301: Cube","title":"301: Cube","text":"","category":"section"},{"location":"examples/Example301_Cube/","page":"301: Cube","title":"301: Cube","text":"(source code)","category":"page"},{"location":"examples/Example301_Cube/","page":"301: Cube","title":"301: Cube","text":"module Example301_Cube\nusing ExtendableGrids\nusing SimplexGridFactory\n\n\nfunction main(;plotter=nothing,vol=1)\n\n    grid=simplexgrid(points=[0 0 0;\n                             1 0 0;\n                             1 1 0;\n                             0 1 0;\n                             0 0 1;\n                             1 0 1;\n                             1 1 1;\n                             0 1 1]',\n\n                     bfaces=[1 2 3 4;\n                             5 6 7 8;\n                             1 2 6 5;\n                             2 3 7 6;\n                             3 4 8 7;\n                             4 1 5 8]',\n                     bfaceregions=ones(6),\n                     flags=\"pAQqa$(vol)\"\n                     )\n    ExtendableGrids.plot(grid,Plotter=plotter)\n    (num_nodes(grid),num_cells(grid),num_bfaces(grid))\nend\nfunction test()\n    main()==(8,6,12)\nend\nend","category":"page"},{"location":"examples/Example301_Cube/","page":"301: Cube","title":"301: Cube","text":"","category":"page"},{"location":"examples/Example301_Cube/","page":"301: Cube","title":"301: Cube","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example201_Square/#:-Square","page":"201: Square","title":"201: Square","text":"","category":"section"},{"location":"examples/Example201_Square/","page":"201: Square","title":"201: Square","text":"(source code)","category":"page"},{"location":"examples/Example201_Square/","page":"201: Square","title":"201: Square","text":"module Example201_Square\nusing ExtendableGrids\nusing SimplexGridFactory\n\n\nfunction main(;plotter=nothing)\n\n    grid=simplexgrid(points=[0 0 ; 0 1 ; 1 1 ; 1 0]',\n                     bfaces=[1 2 ; 2 3 ; 3 4 ; 4 1 ]',\n                     bfaceregions=[1, 2, 3, 4],\n                     regionpoints=[0.5 0.5;]',\n                     regionnumbers=[1],\n                     regionvolumes=[0.01],\n                     flags=\"pAaqQD\")\n    ExtendableGrids.plot(grid,Plotter=plotter)\n    (num_nodes(grid),num_cells(grid),num_bfaces(grid))\n\nend\nfunction test()\n    main()==(89,144,32)\nend\nend","category":"page"},{"location":"examples/Example201_Square/","page":"201: Square","title":"201: Square","text":"","category":"page"},{"location":"examples/Example201_Square/","page":"201: Square","title":"201: Square","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example203_SquareWithHole/#:-Square-with-hole","page":"203: Square with hole","title":"203: Square with hole","text":"","category":"section"},{"location":"examples/Example203_SquareWithHole/","page":"203: Square with hole","title":"203: Square with hole","text":"(source code)","category":"page"},{"location":"examples/Example203_SquareWithHole/","page":"203: Square with hole","title":"203: Square with hole","text":"module Example203_SquareWithHole\nusing ExtendableGrids\nusing SimplexGridFactory\n\nfunction main(;plotter=nothing)\n\n    function unsuitable(x1,y1,x2,y2,x3,y3, area)\n        bary_x=x1+x2+x3\n        bary_y=y2+y2+y3\n        if area > 0.001*bary_x\n            return 1\n        else\n            return 0\n        end\n    end\n\n    grid=simplexgrid(points=[0 0 ; 0 1 ; 1 1 ; 1 0; 0.3 0.3 ; 0.3 0.7 ; 0.7 0.7  ; 0.7 0.3]',\n                     bfaces=[1 2 ; 2 3 ; 3 4 ; 4 1 ; 5 6 ; 6 7; 7 8; 8 5]',\n                     bfaceregions=[1, 2, 3, 4,5,5,5,5],\n                     regionpoints=[0.25 0.25;0.5 0.5]',\n                     regionnumbers=[1, 0],\n                     regionvolumes=[0.01, 1],\n                     flags=\"pAaqQD\")\n\n    ExtendableGrids.plot(grid,Plotter=plotter)\n    (num_nodes(grid),num_cells(grid),num_bfaces(grid))\nend\nfunction test()\n    main()==(93, 139, 47)\nend\nend","category":"page"},{"location":"examples/Example203_SquareWithHole/","page":"203: Square with hole","title":"203: Square with hole","text":"","category":"page"},{"location":"examples/Example203_SquareWithHole/","page":"203: Square with hole","title":"203: Square with hole","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example352_PrismBuilder/#:-Prism-with-SimplexGridBuilder","page":"352: Prism with SimplexGridBuilder","title":"352: Prism with SimplexGridBuilder","text":"","category":"section"},{"location":"examples/Example352_PrismBuilder/","page":"352: Prism with SimplexGridBuilder","title":"352: Prism with SimplexGridBuilder","text":"(source code)","category":"page"},{"location":"examples/Example352_PrismBuilder/","page":"352: Prism with SimplexGridBuilder","title":"352: Prism with SimplexGridBuilder","text":"module Example352_PrismBuilder\nusing ExtendableGrids\nusing SimplexGridFactory\n\n\nfunction main(;plotter=nothing,vol=2)\n\n    builder=SimplexGridBuilder(dim_space=3)\n\n    p1=point!(builder,0, 0, 0)\n    p2=point!(builder,1, 0, 0)\n    p3=point!(builder,0, 1, 0)\n    p4=point!(builder,0, 0, 1)\n    p5=point!(builder,1, 0, 1)\n    p6=point!(builder,0, 1, 1)\n\n\n                     bfaces=[[1,2,3],\n                             [4,5,6],\n                             [1,2,5,4],\n                             [2,3,6,5],\n                             [3,1,4,6]],\n\n\n\n\n    facet!(builder,p1, p2, p3 )\n    facet!(builder,p4, p5, p6 )\n    facet!(builder,p1, p2, p5, p4 )\n    facet!(builder,p2, p3, p6, p5 )\n    facet!(builder,p3, p1, p4, p6 )\n\n    cellregion!(builder,0.25,0.25,0.5,region=1,volume=vol)\n    flags!(builder,\"pAQa\")\n    grid=simplexgrid(builder)\n\n\n    ExtendableGrids.plot(grid,Plotter=plotter)\n    (num_nodes(grid),num_cells(grid),num_bfaces(grid))\nend\n\nfunction test()\n    main()==(6,3,8)\nend\nend","category":"page"},{"location":"examples/Example352_PrismBuilder/","page":"352: Prism with SimplexGridBuilder","title":"352: Prism with SimplexGridBuilder","text":"","category":"page"},{"location":"examples/Example352_PrismBuilder/","page":"352: Prism with SimplexGridBuilder","title":"352: Prism with SimplexGridBuilder","text":"This page was generated using Literate.jl.","category":"page"},{"location":"pluto/","page":"Pluto Notebook(s)","title":"Pluto Notebook(s)","text":"PlutoGridFactory","category":"page"},{"location":"examples/Example251_SquareBuilder/#:-Square-using-SimplexGridBuilder","page":"251: Square using SimplexGridBuilder","title":"251: Square using SimplexGridBuilder","text":"","category":"section"},{"location":"examples/Example251_SquareBuilder/","page":"251: Square using SimplexGridBuilder","title":"251: Square using SimplexGridBuilder","text":"(source code)","category":"page"},{"location":"examples/Example251_SquareBuilder/","page":"251: Square using SimplexGridBuilder","title":"251: Square using SimplexGridBuilder","text":"module Example251_SquareBuilder\nusing SimplexGridFactory\nusing ExtendableGrids\n\nfunction main(;Plotter=nothing)\n\n    builder=SimplexGridBuilder(dim_space=2)\n\n    p1=point!(builder,0,0)\n    p2=point!(builder,1,0)\n    p3=point!(builder,1,1)\n    p4=point!(builder,0,1)\n    facet!(builder,p1,p2,region=1)\n    facet!(builder,p2,p3,region=2)\n    facet!(builder,p3,p4,region=3)\n    facet!(builder,p4,p1,region=4)\n\n    cellregion!(builder,0.5,0.5,region=1,volume=0.01)\n    grid=simplexgrid(builder)\n    @show grid\n\n    plot(grid,Plotter=Plotter)\n    (num_nodes(grid),num_cells(grid),num_bfaces(grid))\nend\n\nfunction test()\n    main()==(89,144,32)\nend\nend","category":"page"},{"location":"examples/Example251_SquareBuilder/","page":"251: Square using SimplexGridBuilder","title":"251: Square using SimplexGridBuilder","text":"","category":"page"},{"location":"examples/Example251_SquareBuilder/","page":"251: Square using SimplexGridBuilder","title":"251: Square using SimplexGridBuilder","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example202_SquareLocalRef/#:-Locally-refined-square","page":"202: Locally refined square","title":"202: Locally refined square","text":"","category":"section"},{"location":"examples/Example202_SquareLocalRef/","page":"202: Locally refined square","title":"202: Locally refined square","text":"(source code)","category":"page"},{"location":"examples/Example202_SquareLocalRef/","page":"202: Locally refined square","title":"202: Locally refined square","text":"module Example202_SquareLocalRef\nusing ExtendableGrids\nusing SimplexGridFactory\n\nfunction main(;plotter=nothing)\n\n    function unsuitable(x1,y1,x2,y2,x3,y3, area)\n        bary_x=x1+x2+x3\n        bary_y=y2+y2+y3\n        if area > 0.001*bary_x\n            return 1\n        else\n            return 0\n        end\n    end\n\n    grid=simplexgrid(points=[0 0 ; 0 1 ; 1 1 ; 1 0]',\n                     bfaces=[1 2 ; 2 3 ; 3 4 ; 4 1 ]',\n                     bfaceregions=[1, 2, 3, 4],\n                     regionpoints=[0.5 0.5;]',\n                     regionnumbers=[1],\n                     regionvolumes=[0.01],\n                     flags=\"pAaqQDu\",\n                     unsuitable=unsuitable)\n    ExtendableGrids.plot(grid,Plotter=plotter)\n    (num_nodes(grid),num_cells(grid),num_bfaces(grid))\n\nend\nfunction test()\n    main()==(2359, 4128, 588)\nend\nend","category":"page"},{"location":"examples/Example202_SquareLocalRef/","page":"202: Locally refined square","title":"202: Locally refined square","text":"","category":"page"},{"location":"examples/Example202_SquareLocalRef/","page":"202: Locally refined square","title":"202: Locally refined square","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example253_SquareWithHoleBuilder/#:-Square-with-hole-via-GridBuilder","page":"253: Square with hole via GridBuilder","title":"253: Square with hole via GridBuilder","text":"","category":"section"},{"location":"examples/Example253_SquareWithHoleBuilder/","page":"253: Square with hole via GridBuilder","title":"253: Square with hole via GridBuilder","text":"(source code)","category":"page"},{"location":"examples/Example253_SquareWithHoleBuilder/","page":"253: Square with hole via GridBuilder","title":"253: Square with hole via GridBuilder","text":"module Example253_SquareWithHoleBuilder\nusing SimplexGridFactory\nusing ExtendableGrids\n\nfunction main(;Plotter=nothing)\n\n    builder=SimplexGridBuilder(dim_space=2)\n    p1=point!(builder,0,0)\n    p2=point!(builder,1,0)\n    p3=point!(builder,1,1)\n    p4=point!(builder,0,1)\n    facet!(builder,p1,p2,region=1)\n    facet!(builder,p2,p3,region=2)\n    facet!(builder,p3,p4,region=3)\n    facet!(builder,p4,p1,region=4)\n\n\n    h1=point!(builder,0.3, 0.3)\n    h2=point!(builder,0.3, 0.7)\n    h3=point!(builder,0.7, 0.7)\n    h4=point!(builder,0.7, 0.3)\n\n    facet!(builder,h1,h2,region=5)\n    facet!(builder,h2,h3,region=5)\n    facet!(builder,h3,h4,region=5)\n    facet!(builder,h4,h1,region=5)\n\n    hole!(builder, 0.5, 0.5)\n    cellregion!(builder,0.25,0.25,region=1,volume=0.01)\n\n    grid=simplexgrid(builder)\n\n    plot(grid,Plotter=Plotter)\n    (num_nodes(grid),num_cells(grid),num_bfaces(grid))\nend\n\nfunction test()\n    main()==(93, 139, 47)\nend\nend","category":"page"},{"location":"examples/Example253_SquareWithHoleBuilder/","page":"253: Square with hole via GridBuilder","title":"253: Square with hole via GridBuilder","text":"","category":"page"},{"location":"examples/Example253_SquareWithHoleBuilder/","page":"253: Square with hole via GridBuilder","title":"253: Square with hole via GridBuilder","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example252_SquareLocalRefBuilder/#:-Locally-refined-square-using-GridBuilder","page":"252: Locally refined square using GridBuilder","title":"252: Locally refined square using GridBuilder","text":"","category":"section"},{"location":"examples/Example252_SquareLocalRefBuilder/","page":"252: Locally refined square using GridBuilder","title":"252: Locally refined square using GridBuilder","text":"(source code)","category":"page"},{"location":"examples/Example252_SquareLocalRefBuilder/","page":"252: Locally refined square using GridBuilder","title":"252: Locally refined square using GridBuilder","text":"module Example252_SquareLocalRefBuilder\nusing SimplexGridFactory\nusing ExtendableGrids\n\nfunction main(;plotter=nothing)\n\n    builder=SimplexGridBuilder(dim_space=2)\n    appendflags!(builder,\"u\")\n    p1=point!(builder,0,0)\n    p2=point!(builder,1,0)\n    p3=point!(builder,1,1)\n    p4=point!(builder,0,1)\n    facet!(builder,p1,p2,region=1)\n    facet!(builder,p2,p3,region=2)\n    facet!(builder,p3,p4,region=3)\n    facet!(builder,p4,p1,region=4)\n\n    cellregion!(builder,0.5,0.5,region=1,volume=0.01)\n\n    function unsuitable(x1,y1,x2,y2,x3,y3, area)\n        bary_x=x1+x2+x3\n        bary_y=y2+y2+y3\n        if area > 0.001*bary_x\n            return 1\n        else\n            return 0\n        end\n    end\n    unsuitable!(builder, unsuitable)\n\n    grid=simplexgrid(builder)\n    @show grid\n\n\n    plot(grid,Plotter=plotter)\n    (num_nodes(grid),num_cells(grid),num_bfaces(grid))\nend\n\nfunction test()\n    main()==(2359, 4128, 588)\nend\nend","category":"page"},{"location":"examples/Example252_SquareLocalRefBuilder/","page":"252: Locally refined square using GridBuilder","title":"252: Locally refined square using GridBuilder","text":"","category":"page"},{"location":"examples/Example252_SquareLocalRefBuilder/","page":"252: Locally refined square using GridBuilder","title":"252: Locally refined square using GridBuilder","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example302_Prism/#:-Prism","page":"302: Prism","title":"302: Prism","text":"","category":"section"},{"location":"examples/Example302_Prism/","page":"302: Prism","title":"302: Prism","text":"(source code)","category":"page"},{"location":"examples/Example302_Prism/","page":"302: Prism","title":"302: Prism","text":"module Example302_Prism\nusing ExtendableGrids\nusing SimplexGridFactory\n\n\nfunction main(;plotter=nothing,vol=2)\n\n    grid=simplexgrid(points=[0 0 0;\n                             1 0 0;\n                             0 1 0;\n                             0 0 1;\n                             1 0 1;\n                             0 1 1]',\n\n                     bfaces=[[1,2,3],\n                             [4,5,6],\n                             [1,2,5,4],\n                             [2,3,6,5],\n                             [3,1,4,6]],\n\n                     regionpoints=[0.25 0.25 0.25;],\n                     regionvolumes=[vol],\n                     regionnumbers=[1],\n                     bfaceregions=ones(5),\n                     flags=\"pAQa\"\n                     )\n    ExtendableGrids.plot(grid,Plotter=plotter)\n    (num_nodes(grid),num_cells(grid),num_bfaces(grid))\nend\n\nfunction test()\n    main()==(6,3,8)\nend\nend","category":"page"},{"location":"examples/Example302_Prism/","page":"302: Prism","title":"302: Prism","text":"","category":"page"},{"location":"examples/Example302_Prism/","page":"302: Prism","title":"302: Prism","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example351_CubeBuilder/#:-Cube-with-SimplexGridBuilder","page":"351: Cube with SimplexGridBuilder","title":"351: Cube with SimplexGridBuilder","text":"","category":"section"},{"location":"examples/Example351_CubeBuilder/","page":"351: Cube with SimplexGridBuilder","title":"351: Cube with SimplexGridBuilder","text":"(source code)","category":"page"},{"location":"examples/Example351_CubeBuilder/","page":"351: Cube with SimplexGridBuilder","title":"351: Cube with SimplexGridBuilder","text":"module Example351_CubeBuilder\nusing ExtendableGrids\nusing SimplexGridFactory\n\n\nfunction main(;plotter=nothing,vol=1)\n\n    builder=SimplexGridBuilder(dim_space=3)\n\n    p1=point!(builder,0, 0, 0)\n    p2=point!(builder,1, 0, 0)\n    p3=point!(builder,1, 1, 0)\n    p4=point!(builder,0, 1, 0)\n    p5=point!(builder,0, 0, 1)\n    p6=point!(builder,1, 0, 1)\n    p7=point!(builder,1, 1, 1)\n    p8=point!(builder,0, 1, 1)\n\n\n    facet!(builder,p1, p2, p3, p4 )\n    facet!(builder,p5, p6, p7, p8 )\n    facet!(builder,p1, p2, p6, p5 )\n    facet!(builder,p2, p3, p7, p6 )\n    facet!(builder,p3, p4, p8, p7 )\n    facet!(builder,p4, p1, p5, p8 )\n\n    cellregion!(builder,0.5,0.5,0.5,region=1,volume=vol)\n    grid=simplexgrid(builder)\n    ExtendableGrids.plot(grid,Plotter=plotter)\n    (num_nodes(grid),num_cells(grid),num_bfaces(grid))\nend\n\nfunction test()\n    main()==(8,6,12)\nend\nend","category":"page"},{"location":"examples/Example351_CubeBuilder/","page":"351: Cube with SimplexGridBuilder","title":"351: Cube with SimplexGridBuilder","text":"","category":"page"},{"location":"examples/Example351_CubeBuilder/","page":"351: Cube with SimplexGridBuilder","title":"351: Cube with SimplexGridBuilder","text":"This page was generated using Literate.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Markdown\nMarkdown.parse(\"\"\"\n$(read(\"../../README.md\",String))\n\"\"\")","category":"page"},{"location":"#API-Documentation","page":"Home","title":"API Documentation","text":"","category":"section"},{"location":"#Mesh-generator-interface","page":"Home","title":"Mesh generator interface","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [SimplexGridFactory]\nPages = [\"triangle.jl\"]","category":"page"},{"location":"#ExtendableGrids.simplexgrid-Tuple{String,Triangulate.TriangulateIO}","page":"Home","title":"ExtendableGrids.simplexgrid","text":"simplexgrid(flags::String, input::Triangulate.TriangulateIO; unsuitable) -> ExtendableGrid{Float64,Int32}\n\n\nCreate Grid from Triangle input data.\n\nSee the documentations for  TriangulateIO, triunsuitable and the short resp. long  documentation of the Triangle control flags.\n\n\n\n\n\n","category":"method"},{"location":"#SimplexGridFactory.triangulateio-Tuple{}","page":"Home","title":"SimplexGridFactory.triangulateio","text":"triangulateio(; flags, points, bfaces, bfaceregions, regionpoints, regionnumbers, regionvolumes) -> Triangulate.TriangulateIO\n\n\nCreate a TriangulateIO structure  from a number of input arrays. The 2D input arrays are transposed if necessary and converted to the proper data types for Triangulate.\n\nThis conversion is not performed if the data types are those indicated in the defaults and the leading dimension of 2D arrays corresponds to the space dimension.\n\n\n\n\n\n","category":"method"},{"location":"#SimplexGridBuilder","page":"Home","title":"SimplexGridBuilder","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [SimplexGridFactory]\nPages = [\"simplexgridbuilder.jl\",\"plot.jl\"]","category":"page"},{"location":"#SimplexGridFactory.SimplexGridBuilder","page":"Home","title":"SimplexGridFactory.SimplexGridBuilder","text":"mutable struct SimplexGridBuilder\n\nSimplex grid builder: wrapper around array based mesh generator interface. It allows build up the input data incrementally.\n\n\n\n\n\n","category":"type"},{"location":"#SimplexGridFactory.SimplexGridBuilder-Tuple{}","page":"Home","title":"SimplexGridFactory.SimplexGridBuilder","text":"SimplexGridBuilder(; dim_space, tol, flags)\n\n\nCreate a SimplexGridBuilder.\n\nFor the flags parameter see the  short resp. long  documentation of the Triangle control flags.\n\nPossible standard Triangle control flags:\n\nDict(:pointset => \"Q\",:domain => \"pAaqDQ\",:convex_hull => \"cQ\")\n\n\n\n\n\n","category":"method"},{"location":"#ExtendableGrids.dim_space-Tuple{SimplexGridBuilder}","page":"Home","title":"ExtendableGrids.dim_space","text":"dim_space(this::SimplexGridBuilder) -> Int64\n\n\nSpace dimension\n\n\n\n\n\n","category":"method"},{"location":"#ExtendableGrids.simplexgrid-Tuple{SimplexGridBuilder}","page":"Home","title":"ExtendableGrids.simplexgrid","text":"simplexgrid(this::SimplexGridBuilder) -> ExtendableGrid{Float64,Int32}\n\n\nBuild simplex grid from the current state of the builder.\n\n\n\n\n\n","category":"method"},{"location":"#ExtendableGrids.simplexgrid-Tuple{}","page":"Home","title":"ExtendableGrids.simplexgrid","text":"function simplexgrid(;flags::String=\"pAaqDQ\",\n                     points=Array{Cdouble,2}(undef,0,0),\n                     bfaces=Array{Cint,2}(undef,0,0),\n                     bfaceregions=Array{Cint,1}(undef,0),\n                     regionpoints=Array{Cdouble,2}(undef,0,0),\n                     regionnumbers=Array{Cint,1}(undef,0),\n                     regionvolumes=Array{Cdouble,1}(undef,0),\n                     unsuitable=nothing\n                  )\n\nCreate Grid from a number of input arrays. The 2D input arrays are transposed if necessary and converted to the proper data types for TetGen.\n\nThis conversion is not performed if the data types are those indicated in the defaults and the leading dimension of 2D arrays corresponds to the space dimension.\n\nSee the documentations for  triunsuitable and the short resp. long  documentation of the Triangle control flags.\n\n\n\n\n\n","category":"method"},{"location":"#SimplexGridFactory.appendflags!-Tuple{SimplexGridBuilder,String}","page":"Home","title":"SimplexGridFactory.appendflags!","text":"appendflags!(this::SimplexGridBuilder, flags::String) -> String\n\n\nAppend flags to Triangle control flags\n\n\n\n\n\n","category":"method"},{"location":"#SimplexGridFactory.cellregion!-Tuple{SimplexGridBuilder,Any,Any,Any}","page":"Home","title":"SimplexGridFactory.cellregion!","text":"cellregion!(this::SimplexGridBuilder, x::Any, y::Any, z::Any; region, volume) -> Int64\n\n\nAdd a region point marking a region, indicate simplex volume in this region.\n\n\n\n\n\n","category":"method"},{"location":"#SimplexGridFactory.cellregion!-Tuple{SimplexGridBuilder,Any,Any}","page":"Home","title":"SimplexGridFactory.cellregion!","text":"cellregion!(this::SimplexGridBuilder, x::Any, y::Any; region, volume) -> Array{Int32,1}\n\n\nAdd a region point marking a region, indicate simplex volume in this region.\n\n\n\n\n\n","category":"method"},{"location":"#SimplexGridFactory.cellregion!-Tuple{SimplexGridBuilder,Any}","page":"Home","title":"SimplexGridFactory.cellregion!","text":"cellregion!(this::SimplexGridBuilder, x::Any; region, volume) -> Union{Int64, Array{Int32,1}}\n\n\nAdd a region point marking a region, indicate simplex volume in this region.\n\n\n\n\n\n","category":"method"},{"location":"#SimplexGridFactory.cellregion!-Tuple{SimplexGridBuilder,Union{Tuple, Array{T,1} where T}}","page":"Home","title":"SimplexGridFactory.cellregion!","text":"cellregion!(this::SimplexGridBuilder, p::Union{Tuple, Array{T,1} where T}; region, volume) -> Union{Int64, Array{Int32,1}}\n\n\nAdd a region point marking a region, indicate simplex volume in this region.\n\n\n\n\n\n","category":"method"},{"location":"#SimplexGridFactory.facet!-Tuple{SimplexGridBuilder,Any,Any,Any,Any}","page":"Home","title":"SimplexGridFactory.facet!","text":"facet!(this::SimplexGridBuilder, i1::Any, i2::Any, i3::Any, i4::Any; region) -> Int64\n\n\nAdd a facet via the corresponding point indices.\n\n\n\n\n\n","category":"method"},{"location":"#SimplexGridFactory.facet!-Tuple{SimplexGridBuilder,Any,Any,Any}","page":"Home","title":"SimplexGridFactory.facet!","text":"facet!(this::SimplexGridBuilder, i1::Any, i2::Any, i3::Any; region) -> Int64\n\n\nAdd a facet via the corresponding point indices.\n\n\n\n\n\n","category":"method"},{"location":"#SimplexGridFactory.facet!-Tuple{SimplexGridBuilder,Any,Any}","page":"Home","title":"SimplexGridFactory.facet!","text":"facet!(this::SimplexGridBuilder, i1::Any, i2::Any; region) -> Int64\n\n\nAdd a facet via the corresponding point indices.\n\n\n\n\n\n","category":"method"},{"location":"#SimplexGridFactory.facet!-Tuple{SimplexGridBuilder,Any}","page":"Home","title":"SimplexGridFactory.facet!","text":"facet!(this::SimplexGridBuilder, i::Any; region) -> Int64\n\n\nAdd a facet via the corresponding point indices.\n\n\n\n\n\n","category":"method"},{"location":"#SimplexGridFactory.facet!-Tuple{SimplexGridBuilder,Union{Tuple, Array{T,1} where T}}","page":"Home","title":"SimplexGridFactory.facet!","text":"facet!(this::SimplexGridBuilder, p::Union{Tuple, Array{T,1} where T}; region) -> Int64\n\n\nAdd a facet via the corresponding point indices.\n\n\n\n\n\n","category":"method"},{"location":"#SimplexGridFactory.flags!-Tuple{SimplexGridBuilder,String}","page":"Home","title":"SimplexGridFactory.flags!","text":"flags!(this::SimplexGridBuilder, flags::String) -> String\n\n\nSet Triangle Control flags\n\n\n\n\n\n","category":"method"},{"location":"#SimplexGridFactory.flags!-Tuple{SimplexGridBuilder,Symbol}","page":"Home","title":"SimplexGridFactory.flags!","text":"flags!(this::SimplexGridBuilder, flags::Symbol) -> String\n\n\nSet standard Triangle Control flags\n\n\n\n\n\n","category":"method"},{"location":"#SimplexGridFactory.flags-Tuple{SimplexGridBuilder}","page":"Home","title":"SimplexGridFactory.flags","text":"flags(this::SimplexGridBuilder) -> String\n\n\nCurrent Triangle contol flags \n\n\n\n\n\n","category":"method"},{"location":"#SimplexGridFactory.hole!-Tuple{SimplexGridBuilder,Any,Any,Any}","page":"Home","title":"SimplexGridFactory.hole!","text":"hole!(this::SimplexGridBuilder, x::Any, y::Any, z::Any) -> Int64\n\n\nAdd a point marking a hole region\n\n\n\n\n\n","category":"method"},{"location":"#SimplexGridFactory.hole!-Tuple{SimplexGridBuilder,Any,Any}","page":"Home","title":"SimplexGridFactory.hole!","text":"hole!(this::SimplexGridBuilder, x::Any, y::Any) -> Array{Int32,1}\n\n\nAdd a point marking a hole region\n\n\n\n\n\n","category":"method"},{"location":"#SimplexGridFactory.hole!-Tuple{SimplexGridBuilder,Any}","page":"Home","title":"SimplexGridFactory.hole!","text":"hole!(this::SimplexGridBuilder, x::Any) -> Any\n\n\nAdd a point marking a hole region\n\n\n\n\n\n","category":"method"},{"location":"#SimplexGridFactory.hole!-Tuple{SimplexGridBuilder,Union{Tuple, Array{T,1} where T}}","page":"Home","title":"SimplexGridFactory.hole!","text":"hole!(this::SimplexGridBuilder, p::Union{Tuple, Array{T,1} where T}) -> Any\n\n\nAdd a point marking a hole region\n\n\n\n\n\n","category":"method"},{"location":"#SimplexGridFactory.point!-Tuple{SimplexGridBuilder,Any,Any,Any}","page":"Home","title":"SimplexGridFactory.point!","text":"point!(this::SimplexGridBuilder, x::Any, y::Any, z::Any) -> Int64\n\n\nAdd point or merge with already existing point. Return its index.\n\n\n\n\n\n","category":"method"},{"location":"#SimplexGridFactory.point!-Tuple{SimplexGridBuilder,Any,Any}","page":"Home","title":"SimplexGridFactory.point!","text":"point!(this::SimplexGridBuilder, x::Any, y::Any) -> Int64\n\n\nAdd point or merge with already existing point. Return its index.\n\n\n\n\n\n","category":"method"},{"location":"#SimplexGridFactory.point!-Tuple{SimplexGridBuilder,Any}","page":"Home","title":"SimplexGridFactory.point!","text":"point!(this::SimplexGridBuilder, x::Any) -> Int64\n\n\nAdd point or merge with already existing point. Return its index.\n\n\n\n\n\n","category":"method"},{"location":"#SimplexGridFactory.point!-Tuple{SimplexGridBuilder,Union{Tuple, Array{T,1} where T}}","page":"Home","title":"SimplexGridFactory.point!","text":"point!(this::SimplexGridBuilder, p::Union{Tuple, Array{T,1} where T}) -> Int64\n\n\nAdd point or merge with already existing point. Return its index.\n\n\n\n\n\n","category":"method"},{"location":"#SimplexGridFactory.tetgenio-Tuple{SimplexGridBuilder}","page":"Home","title":"SimplexGridFactory.tetgenio","text":"tetgenio(this::SimplexGridBuilder) -> Triangulate.TriangulateIO\n\n\nCreate tetgen input from the current state of the builder.\n\n\n\n\n\n","category":"method"},{"location":"#SimplexGridFactory.triangleflags-Tuple{Symbol}","page":"Home","title":"SimplexGridFactory.triangleflags","text":"triangleflags(s::Symbol) -> String\n\n\nReturn some standard triangle control flags.\n\n\n\n\n\n","category":"method"},{"location":"#SimplexGridFactory.triangleflags-Tuple{}","page":"Home","title":"SimplexGridFactory.triangleflags","text":"triangleflags() -> Dict{Symbol,String}\n\n\nReturn Dict with  possible standard triangle control flags.\n\n\n\n\n\n","category":"method"},{"location":"#SimplexGridFactory.triangulateio-Tuple{SimplexGridBuilder}","page":"Home","title":"SimplexGridFactory.triangulateio","text":"triangulateio(this::SimplexGridBuilder) -> Triangulate.TriangulateIO\n\n\nCreate triangle input from the current state of the builder.\n\n\n\n\n\n","category":"method"},{"location":"#SimplexGridFactory.unsuitable!-Tuple{SimplexGridBuilder,Function}","page":"Home","title":"SimplexGridFactory.unsuitable!","text":"unsuitable!(this::SimplexGridBuilder, func::Function) -> Function\n\n\nSet unsuitable function, see triunsuitable.\n\n\n\n\n\n","category":"method"},{"location":"#ExtendableGrids.plot!-Tuple{PlotterContext,SimplexGridBuilder}","page":"Home","title":"ExtendableGrids.plot!","text":"plot!(ctx::PlotterContext, gf::SimplexGridBuilder; kwargs...) -> Any\n\n\nTwo panel plot of gridfactory and its output.\n\n\n\n\n\n","category":"method"},{"location":"#ExtendableGrids.plot-Tuple{SimplexGridBuilder}","page":"Home","title":"ExtendableGrids.plot","text":"plot(gf::SimplexGridBuilder; Plotter, kwargs...)\n\n\nTwo panel plot of gridfactory with input and resulting grid\n\n\n\n\n\n","category":"method"}]
}
